// Copyright Â©2018 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This is a translation and extension of the FFTPACK test
// functions by Paul N Swarztrauber, placed in the public
// domain at http://www.netlib.org/fftpack/.

package fftpack

import (
	"math"
	"math/cmplx"
	"reflect"
	"testing"

	"gonum.org/v1/gonum/floats"
)

func TestRfft(t *testing.T) {
	const tol = 1e-12
	for _, test := range rfftTests {
		work := make([]float64, 2*test.n)
		ifac := make([]int, 15)
		Rffti(test.n, work, ifac)
		var failed bool
		if !floats.EqualApprox(work, test.wantiwork, 1e-6) {
			failed = true
			t.Errorf("unexpected work after call to rffti for n=%d", test.n)
		}
		if !reflect.DeepEqual(ifac, test.wantiifac) {
			failed = true
			t.Errorf("unexpected ifac after call to rffti for n=%d", test.n)
		}
		if failed {
			continue
		}

		modn := test.n % 2
		fn := float64(test.n)
		nm1 := test.n - 1
		x, y, xh := series(test.n)

		dt := 2 * math.Pi / fn
		ns2 := (test.n + 1) / 2
		if ns2 >= 2 {
			for k := 1; k < ns2; k++ { //eek
				var sum1, sum2 float64
				arg := float64(k) * dt
				for i := 0; i < test.n; i++ {
					arg1 := float64(i) * arg
					sum1 += x[i] * math.Cos(arg1)
					sum2 += x[i] * math.Sin(arg1)
				}
				y[2*k-1] = sum1
				y[2*k] = -sum2
			}
		}
		var sum1, sum2 float64
		for i := 0; i < nm1; i += 2 {
			sum1 += x[i]
			sum2 += x[i+1]
		}
		if modn == 1 {
			sum1 += x[test.n-1]
		}
		y[0] = sum1 + sum2
		if modn == 0 {
			y[test.n-1] = sum1 - sum2
		}

		Rfftf(test.n, x, work, ifac)
		var rftf float64
		for i := 0; i < test.n; i++ {
			rftf = math.Max(rftf, math.Abs(x[i]-y[i]))
			x[i] = xh[i]
		}
		rftf /= fn
		if !floats.EqualWithinAbsOrRel(rftf, 0, tol, tol) {
			t.Errorf("unexpected rftf value for n=%d: got:%f want:0", test.n, rftf)
		}

		for i := 0; i < test.n; i++ {
			sum := x[0] / 2
			arg := float64(i) * dt
			if ns2 >= 2 {
				for k := 1; k < ns2; k++ { //eek
					arg1 := float64(k) * arg
					sum += x[2*k-1]*math.Cos(arg1) - x[2*k]*math.Sin(arg1)
				}
			}
			if modn == 0 {
				// This is how it was written in FFTPACK.
				sum += 0.5 * math.Pow(-1, float64(i)) * x[test.n-1]
			}
			y[i] = 2 * sum
		}
		Rfftb(test.n, x, work, ifac)
		var rftb float64
		for i := 0; i < test.n; i++ {
			rftb = math.Max(rftb, math.Abs(x[i]-y[i]))
			x[i] = xh[i]
			y[i] = xh[i]
		}
		if !floats.EqualWithinAbsOrRel(rftb, 0, tol, tol) {
			t.Errorf("unexpected rftb value for n=%d: got:%f want:0", test.n, rftb)
		}

		Rfftb(test.n, y, work, ifac)
		Rfftf(test.n, y, work, ifac)
		cf := 1.0 / fn
		var rftfb float64
		for i := 0; i < test.n; i++ {
			rftfb = math.Max(rftfb, math.Abs(cf*y[i]-x[i]))
		}
		if !floats.EqualWithinAbsOrRel(rftfb, 0, tol, tol) {
			t.Errorf("unexpected rftfb value for n=%d: got:%f want:0", test.n, rftfb)
		}
	}
}

func series(n int) (x, y, xh []float64) {
	x = make([]float64, n)
	y = make([]float64, n)
	xh = make([]float64, n)
	for i := 0; i < n; i++ {
		x[i] = math.Sin(float64(i+1) * math.Sqrt2)
		y[i] = x[i]
		xh[i] = x[i]
	}
	return x, y, xh
}

var rfftTests = []struct {
	n int

	// The following two fields are added as there is no unit testing in
	// FFTPACK for RFFTI.
	//
	// wantiwork is obtained from the FFTPACK test.f with modification.
	// The W array is zeroed at each iteration and the first 2n elements
	// of W are printed after the call to RFFTI.
	wantiwork []float64
	// wantiifac is obtained from the FFTPACK rffti1.f with modification.
	// The IFAC array is zeroed at each iteration of test.f and the 15 elements
	// of IFAC are printed before RFFTI1 returns.
	wantiifac []int
}{
	{
		n: 120,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.9986295, 0.5233596E-01, 0.9945219, 0.1045285, 0.9876884, 0.1564345, 0.9781476, 0.2079117,
			0.9659258, 0.2588190, 0.9510565, 0.3090170, 0.9335804, 0.3583679, 0.9135454, 0.4067366,
			0.8910065, 0.4539905, 0.8660254, 0.5000000, 0.8386706, 0.5446391, 0.8090170, 0.5877852,
			0.7771459, 0.6293204, 0.7431448, 0.6691306, 0.7071068, 0.7071068, 0.6691306, 0.7431449,
			0.6293204, 0.7771460, 0.5877852, 0.8090170, 0.5446390, 0.8386706, 0.5000000, 0.8660254,
			0.4539905, 0.8910065, 0.4067366, 0.9135455, 0.3583679, 0.9335805, 0.3090170, 0.9510565,
			0.2588191, 0.9659258, 0.2079117, 0.9781476, 0.1564344, 0.9876884, 0.1045284, 0.9945219,
			0.5233597E-01, 0.9986295, 0.000000, 0.000000, 0.9945219, 0.1045285, 0.9781476, 0.2079117,
			0.9510565, 0.3090170, 0.9135454, 0.4067366, 0.8660254, 0.5000000, 0.8090170, 0.5877852,
			0.7431448, 0.6691306, 0.000000, 0.9781476, 0.2079117, 0.9135454, 0.4067366, 0.8090170,
			0.5877852, 0.6691306, 0.7431449, 0.5000000, 0.8660254, 0.3090170, 0.9510565, 0.1045284,
			0.9945219, 0.000000, 0.9510565, 0.3090170, 0.8090170, 0.5877852, 0.5877852, 0.8090170,
			0.3090170, 0.9510565, -0.4371139E-07, 1.000000, -0.3090170, 0.9510565, -0.5877852, 0.8090170,
			0.000000, 0.9135454, 0.4067366, 0.6691306, 0.7431449, 0.000000, 0.6691306, 0.7431449,
			-0.1045285, 0.9945219, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{120, 4, 2, 4, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 54,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.9932383, 0.1160929,
			0.9730449, 0.2306159, 0.9396926, 0.3420201, 0.8936327, 0.4487992, 0.8354878, 0.5495090,
			0.7660444, 0.6427876, 0.6862416, 0.7273737, 0.5971586, 0.8021232, 0.5000000, 0.8660254,
			0.3960797, 0.9182161, 0.2868032, 0.9579895, 0.1736482, 0.9848077, 0.5814485E-01, 0.9983082,
			0.000000, 0.9730449, 0.2306159, 0.8936327, 0.4487992, 0.7660444, 0.6427876, 0.5971586,
			0.8021232, 0.000000, 0.8936327, 0.4487992, 0.5971586, 0.8021232, 0.1736482, 0.9848077,
			-0.2868032, 0.9579895, 0.000000, 0.7660444, 0.6427876, 0.000000, 0.1736482, 0.9848077,
			0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{54, 4, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 49,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.9917900, 0.1278772, 0.9672949, 0.2536546, 0.9269168, 0.3752670, 0.000000,
			0.9672949, 0.2536546, 0.8713187, 0.4907176, 0.7183493, 0.6956826, 0.000000, 0.9269168,
			0.3752670, 0.7183493, 0.6956826, 0.4047833, 0.9144127, 0.000000, 0.8713187, 0.4907176,
			0.5183925, 0.8551428, 0.3205151E-01, 0.9994862, 0.000000, 0.8014136, 0.5981106, 0.2845275,
			0.9586679, -0.3453652, 0.9384683, 0.000000, 0.7183493, 0.6956826, 0.3205151E-01, 0.9994862,
			-0.6723010, 0.7402779, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000,
		},
		wantiifac: []int{49, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 32,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
			0.9807853, 0.1950903, 0.9238795, 0.3826835, 0.8314696, 0.5555702, 0.7071068, 0.7071068,
			0.5555702, 0.8314697, 0.3826834, 0.9238795, 0.1950902, 0.9807853, 0.000000, 0.000000,
			0.9238795, 0.3826835, 0.000000, 0.000000, 0.7071068, 0.7071068, 0.000000, 0.000000,
			0.3826834, 0.9238795, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{32, 3, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 25,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.968583, 0.248690, 0.876307, 0.481754, 0.00000, 0.876307, 0.481754,
			0.535827, 0.844328, 0.00000, 0.728969, 0.684547, 0.627904E-01, 0.998027, 0.00000,
			0.535827, 0.844328, -0.425779, 0.904827, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000,
		},
		wantiifac: []int{25, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 4,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 3,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 2,

		wantiwork: []float64{
			0.000000, 0.000000, 0.000000, 0.000000,
		},
		wantiifac: []int{2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
}

func TestCfft(t *testing.T) {
	const tol = 1e-12
	for _, test := range cfftTests {
		work := make([]float64, 4*test.n)
		ifac := make([]int, 15)
		Cffti(test.n, work, ifac)
		var failed bool
		if !floats.EqualApprox(work, test.wantiwork, 1e-6) {
			failed = true
			t.Errorf("unexpected work after call to cffti for n=%d", test.n)
		}
		if !reflect.DeepEqual(ifac, test.wantiifac) {
			failed = true
			t.Errorf("unexpected ifac after call to cffti for n=%d", test.n)
		}
		if failed {
			continue
		}

		fn := float64(test.n)
		cn := complex(fn, 0)

		x, y1 := cmplxSeries(test.n)

		cx := cmplxAsFloat(x)
		Cfftf(test.n, cx, work, ifac)
		x = floatAsCmplx(cx)

		var cftf float64
		for i := 0; i < test.n; i++ {
			cftf = math.Max(cftf, cmplx.Abs(x[i]-y1[i]))
			x[i] /= cn
		}
		cftf /= fn

		if !floats.EqualWithinAbsOrRel(cftf, 0, tol, tol) {
			t.Errorf("unexpected cftf value for n=%d: got:%f want:0", test.n, cftf)
		}

		y2 := updatedCmplxSeries(x)

		cx = cmplxAsFloat(x)
		Cfftb(test.n, cx, work, ifac)
		x = floatAsCmplx(cx)

		var cftb float64
		for i := 0; i < test.n; i++ {
			cftb = math.Max(cftb, cmplx.Abs(x[i]-y2[i]))
			x[i] = y2[i]
		}

		if !floats.EqualWithinAbsOrRel(cftb, 0, tol, tol) {
			t.Errorf("unexpected cftb value for n=%d: got:%f want:0", test.n, cftb)
		}

		cx = cmplxAsFloat(x)
		Cfftf(test.n, cx, work, ifac)
		Cfftb(test.n, cx, work, ifac)
		x = floatAsCmplx(cx)

		var cftfb float64
		for i := 0; i < test.n; i++ {
			cftfb = math.Max(cftfb, cmplx.Abs(x[i]/cn-y2[i]))
		}

		if !floats.EqualWithinAbsOrRel(cftfb, 0, tol, tol) {
			t.Errorf("unexpected cftfb value for n=%d: got:%f want:0", test.n, cftfb)
		}
	}
}

func cmplxSeries(n int) (x, y []complex128) {
	x = make([]complex128, n)
	for i := 0; i < n; i++ {
		x[i] = complex(math.Cos(math.Sqrt2*float64(i+1)), math.Sin(math.Sqrt2*float64((i+1)*(i+1))))
	}

	y = make([]complex128, n)
	dt := 2 * math.Pi / float64(n)
	for i := 0; i < n; i++ {
		arg1 := -float64(i) * dt
		for k := 0; k < n; k++ {
			arg2 := float64(k) * arg1
			y[i] += complex(math.Cos(arg2), math.Sin(arg2)) * x[k]
		}
	}
	return x, y
}

func updatedCmplxSeries(x []complex128) (y []complex128) {
	y = make([]complex128, len(x))
	dt := 2 * math.Pi / float64(len(x))
	for i := range x {
		arg1 := float64(i) * dt
		for k, xv := range x {
			arg2 := float64(k) * arg1
			y[i] += complex(math.Cos(arg2), math.Sin(arg2)) * xv
		}
	}
	return y
}

func cmplxAsFloat(c []complex128) []float64 {
	f := make([]float64, 2*len(c))
	for i, v := range c {
		f[2*i] = real(v)
		f[2*i+1] = imag(v)
	}
	return f
}

func floatAsCmplx(f []float64) []complex128 {
	c := make([]complex128, len(f)/2)
	for i := range c {
		c[i] = complex(f[2*i], f[2*i+1])
	}
	return c
}

var cfftTests = []struct {
	n int

	// The following two fields are added as there is no unit testing in
	// FFTPACK for RFFTI.
	//
	// wantiwork is obtained from the FFTPACK test.f with modification.
	// The W array is zeroed at each iteration and the first 4n elements
	// of W are printed after the call to RFFTI.
	wantiwork []float64
	// wantiifac is obtained from the FFTPACK rffti1.f with modification.
	// The IFAC array is zeroed at each iteration of test.f and the 15 elements
	// of IFAC are printed before RFFTI1 returns.
	wantiifac []int
}{
	{
		n: 120,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			1.00000, 0.00000, 0.998630, 0.523360E-01, 0.994522, 0.104528, 0.987688, 0.156434,
			0.978148, 0.207912, 0.965926, 0.258819, 0.951057, 0.309017, 0.933580, 0.358368,
			0.913545, 0.406737, 0.891007, 0.453991, 0.866025, 0.500000, 0.838671, 0.544639,
			0.809017, 0.587785, 0.777146, 0.629320, 0.743145, 0.669131, 0.707107, 0.707107,
			0.669131, 0.743145, 0.629320, 0.777146, 0.587785, 0.809017, 0.544639, 0.838671,
			0.500000, 0.866025, 0.453991, 0.891007, 0.406737, 0.913545, 0.358368, 0.933580,
			0.309017, 0.951057, 0.258819, 0.965926, 0.207912, 0.978148, 0.156434, 0.987688,
			0.104528, 0.994522, 0.523360E-01, 0.998630, -0.437114E-07, 1.00000, -0.523361E-01, 0.998630,
			-0.104529, 0.994522, -0.156434, 0.987688, -0.207912, 0.978148, -0.258819, 0.965926,
			-0.309017, 0.951056, -0.358368, 0.933580, -0.406737, 0.913545, -0.453991, 0.891006,
			-0.500000, 0.866025, -0.544639, 0.838671, -0.587785, 0.809017, -0.629321, 0.777146,
			-0.669131, 0.743145, -0.707107, 0.707107, -0.743145, 0.669130, -0.777146, 0.629320,
			-0.809017, 0.587785, -0.838671, 0.544639, -0.866025, 0.500000, -0.891007, 0.453990,
			-0.913545, 0.406737, -0.933580, 0.358368, -0.951057, 0.309017, -0.965926, 0.258819,
			-0.978148, 0.207912, -0.987688, 0.156434, -0.994522, 0.104528, -0.998630, 0.523358E-01,
			1.00000, 0.00000, 0.994522, 0.104528, 0.978148, 0.207912, 0.951057, 0.309017,
			0.913545, 0.406737, 0.866025, 0.500000, 0.809017, 0.587785, 0.743145, 0.669131,
			0.669131, 0.743145, 0.587785, 0.809017, 0.500000, 0.866025, 0.406737, 0.913545,
			0.309017, 0.951057, 0.207912, 0.978148, 0.104528, 0.994522, -0.437114E-07, 1.00000,
			-0.104529, 0.994522, -0.207912, 0.978148, -0.309017, 0.951056, -0.406737, 0.913545,
			1.00000, 0.00000, 0.978148, 0.207912, 0.913545, 0.406737, 0.809017, 0.587785,
			0.669131, 0.743145, 0.500000, 0.866025, 0.309017, 0.951057, 0.104528, 0.994522,
			-0.104529, 0.994522, -0.309017, 0.951056, -0.500000, 0.866025, -0.669131, 0.743145,
			-0.809017, 0.587785, -0.913545, 0.406737, -0.978148, 0.207912, -1.00000, -0.874228E-07,
			-0.978148, -0.207912, -0.913545, -0.406737, -0.809017, -0.587785, -0.669131, -0.743145,
			1.00000, 0.00000, 0.951057, 0.309017, 0.809017, 0.587785, 0.587785, 0.809017,
			0.309017, 0.951057, 1.00000, 0.00000, 0.809017, 0.587785, 0.309017, 0.951057,
			-0.309017, 0.951056, -0.809017, 0.587785, 1.00000, 0.00000, 0.587785, 0.809017,
			-0.309017, 0.951056, -0.951057, 0.309017, -0.809017, -0.587785, 1.00000, 0.00000,
			1.00000, 0.00000, 1.00000, 0.00000, 1.00000, 0.00000, 0.309017, -0.951056,
		},
		wantiifac: []int{120, 4, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 54,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, 0.993238, 0.116093,
			0.973045, 0.230616, 0.939693, 0.342020, 0.893633, 0.448799, 0.835488, 0.549509,
			0.766044, 0.642788, 0.686242, 0.727374, 0.597159, 0.802123, 0.500000, 0.866025,
			0.396080, 0.918216, 0.286803, 0.957990, 0.173648, 0.984808, 0.581449E-01, 0.998308,
			-0.581448E-01, 0.998308, -0.173648, 0.984808, -0.286803, 0.957990, -0.396080, 0.918216,
			-0.500000, 0.866025, -0.597159, 0.802123, -0.686242, 0.727374, -0.766044, 0.642788,
			-0.835488, 0.549509, -0.893633, 0.448799, -0.939693, 0.342020, -0.973045, 0.230616,
			-0.993238, 0.116093, 1.00000, 0.00000, 0.973045, 0.230616, 0.893633, 0.448799,
			0.766044, 0.642788, 0.597159, 0.802123, 0.396080, 0.918216, 0.173648, 0.984808,
			-0.581448E-01, 0.998308, -0.286803, 0.957990, 1.00000, 0.00000, 0.893633, 0.448799,
			0.597159, 0.802123, 0.173648, 0.984808, -0.286803, 0.957990, -0.686242, 0.727374,
			-0.939693, 0.342020, -0.993238, -0.116093, -0.835488, -0.549509, 1.00000, 0.00000,
			0.766044, 0.642788, 0.173648, 0.984808, 1.00000, 0.00000, 0.173648, 0.984808,
			-0.939693, 0.342020, 1.00000, 0.00000, 1.00000, 0.00000, -0.500000, -0.866025,
		},
		wantiifac: []int{54, 4, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 49,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.623490, 0.781832, 0.991790, 0.127877, 0.967295, 0.253655,
			0.926917, 0.375267, 0.871319, 0.490718, 0.801414, 0.598111, 0.718349, 0.695683,
			-0.222521, 0.974928, 0.967295, 0.253655, 0.871319, 0.490718, 0.718349, 0.695683,
			0.518393, 0.855143, 0.284527, 0.958668, 0.320515E-01, 0.999486, -0.900969, 0.433884,
			0.926917, 0.375267, 0.718349, 0.695683, 0.404783, 0.914413, 0.320515E-01, 0.999486,
			-0.345365, 0.938468, -0.672301, 0.740278, -0.900969, -0.433884, 0.871319, 0.490718,
			0.518393, 0.855143, 0.320515E-01, 0.999486, -0.462538, 0.886599, -0.838088, 0.545535,
			-0.997945, 0.640701E-01, -0.222521, -0.974928, 0.801414, 0.598111, 0.284527, 0.958668,
			-0.345365, 0.938468, -0.838088, 0.545535, -0.997945, -0.640705E-01, -0.761446, -0.648229,
			0.623490, -0.781831, 0.718349, 0.695683, 0.320515E-01, 0.999486, -0.672301, 0.740278,
			-0.997945, 0.640701E-01, -0.761446, -0.648228, -0.960227E-01, -0.995379, 0.623490, 0.781832,
			-0.222521, 0.974928, -0.900969, 0.433884, -0.900969, -0.433884, -0.222521, -0.974928,
			0.623490, -0.781831, 0.623490, -0.781831,
		},
		wantiifac: []int{49, 2, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 32,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			1.00000, 0.00000, 0.980785, 0.195090, 0.923880, 0.382683, 0.831470, 0.555570,
			0.707107, 0.707107, 0.555570, 0.831470, 0.382683, 0.923880, 0.195090, 0.980785,
			-0.437114E-07, 1.00000, -0.195090, 0.980785, -0.382684, 0.923880, -0.555570, 0.831470,
			-0.707107, 0.707107, -0.831470, 0.555570, -0.923880, 0.382683, -0.980785, 0.195090,
			1.00000, 0.00000, 0.923880, 0.382683, 0.707107, 0.707107, 0.382683, 0.923880,
			1.00000, 0.00000, 0.707107, 0.707107, -0.437114E-07, 1.00000, -0.707107, 0.707107,
			1.00000, 0.00000, 0.382683, 0.923880, -0.707107, 0.707107, -0.923880, -0.382683,
			1.00000, 0.00000, 1.00000, 0.00000, 1.00000, 0.00000, 0.119249E-07, -1.00000,
		},
		wantiifac: []int{32, 3, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 25,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			0.00000, 0.00000, 1.00000, 0.00000, 0.968583, 0.248690, 0.876307, 0.481754,
			0.728969, 0.684547, 0.535827, 0.844328, 1.00000, 0.00000, 0.876307, 0.481754,
			0.535827, 0.844328, 0.627904E-01, 0.998027, -0.425779, 0.904827, 1.00000, 0.00000,
			0.728969, 0.684547, 0.627904E-01, 0.998027, -0.637424, 0.770513, -0.992115, 0.125333,
			1.00000, 0.00000, 0.535827, 0.844328, -0.425779, 0.904827, -0.992115, 0.125333,
			-0.637424, -0.770513, 1.00000, 0.00000, 1.00000, 0.00000, 1.00000, 0.00000,
			1.00000, 0.00000, 0.309017, -0.951056,
		},
		wantiifac: []int{25, 2, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 4,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000,
			1.00000, 0.00000, 1.00000, 0.00000, 1.00000, 0.00000, 0.119249E-07, -1.00000,
		},
		wantiifac: []int{4, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 3,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000,
			1.00000, 0.00000, -0.500000, -0.866025,
		},
		wantiifac: []int{3, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
	{
		n: 2,

		wantiwork: []float64{
			0.00000, 0.00000, 0.00000, 0.00000, 1.00000, 0.00000, -1.00000, -0.874228E-07,
		},
		wantiifac: []int{2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	},
}
