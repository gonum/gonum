
//line parse.rl:1
// Go code generated by go generate gonum.org/v1/gonum/graph/formats/rdf; DO NOT EDIT.

// Copyright Â©2020 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package rdf

import (
	"fmt"
	"net/url"
	"unicode"
)


//line parse.go:19
const nquads_start int = 1
const nquads_first_final int = 87
const nquads_error int = 0

const nquads_en_statement int = 1


//line parse.rl:31


func parse(data []rune) (Statement, error) {
	var (
		cs, p int
		pe    = len(data)
		eof   = pe

		subject   = -1
		predicate = -1
		object    = -1
		label     = -1
		iri       = -1

		s Statement
	)

	
//line parse.go:46
	{
	cs = nquads_start
	}

//line parse.rl:49

	
//line parse.go:54
	{
	if p == pe {
		goto _test_eof
	}
	switch cs {
	case 1:
		goto st_case_1
	case 0:
		goto st_case_0
	case 2:
		goto st_case_2
	case 3:
		goto st_case_3
	case 4:
		goto st_case_4
	case 5:
		goto st_case_5
	case 6:
		goto st_case_6
	case 7:
		goto st_case_7
	case 8:
		goto st_case_8
	case 9:
		goto st_case_9
	case 10:
		goto st_case_10
	case 11:
		goto st_case_11
	case 12:
		goto st_case_12
	case 87:
		goto st_case_87
	case 88:
		goto st_case_88
	case 13:
		goto st_case_13
	case 14:
		goto st_case_14
	case 15:
		goto st_case_15
	case 16:
		goto st_case_16
	case 17:
		goto st_case_17
	case 18:
		goto st_case_18
	case 19:
		goto st_case_19
	case 20:
		goto st_case_20
	case 21:
		goto st_case_21
	case 22:
		goto st_case_22
	case 23:
		goto st_case_23
	case 24:
		goto st_case_24
	case 25:
		goto st_case_25
	case 26:
		goto st_case_26
	case 27:
		goto st_case_27
	case 28:
		goto st_case_28
	case 89:
		goto st_case_89
	case 29:
		goto st_case_29
	case 30:
		goto st_case_30
	case 31:
		goto st_case_31
	case 32:
		goto st_case_32
	case 33:
		goto st_case_33
	case 34:
		goto st_case_34
	case 35:
		goto st_case_35
	case 36:
		goto st_case_36
	case 37:
		goto st_case_37
	case 38:
		goto st_case_38
	case 39:
		goto st_case_39
	case 40:
		goto st_case_40
	case 41:
		goto st_case_41
	case 42:
		goto st_case_42
	case 43:
		goto st_case_43
	case 44:
		goto st_case_44
	case 45:
		goto st_case_45
	case 46:
		goto st_case_46
	case 47:
		goto st_case_47
	case 48:
		goto st_case_48
	case 49:
		goto st_case_49
	case 50:
		goto st_case_50
	case 51:
		goto st_case_51
	case 52:
		goto st_case_52
	case 53:
		goto st_case_53
	case 54:
		goto st_case_54
	case 55:
		goto st_case_55
	case 56:
		goto st_case_56
	case 57:
		goto st_case_57
	case 58:
		goto st_case_58
	case 59:
		goto st_case_59
	case 90:
		goto st_case_90
	case 60:
		goto st_case_60
	case 61:
		goto st_case_61
	case 62:
		goto st_case_62
	case 63:
		goto st_case_63
	case 91:
		goto st_case_91
	case 64:
		goto st_case_64
	case 65:
		goto st_case_65
	case 66:
		goto st_case_66
	case 67:
		goto st_case_67
	case 68:
		goto st_case_68
	case 69:
		goto st_case_69
	case 70:
		goto st_case_70
	case 71:
		goto st_case_71
	case 72:
		goto st_case_72
	case 73:
		goto st_case_73
	case 74:
		goto st_case_74
	case 75:
		goto st_case_75
	case 76:
		goto st_case_76
	case 77:
		goto st_case_77
	case 78:
		goto st_case_78
	case 79:
		goto st_case_79
	case 80:
		goto st_case_80
	case 81:
		goto st_case_81
	case 82:
		goto st_case_82
	case 83:
		goto st_case_83
	case 84:
		goto st_case_84
	case 85:
		goto st_case_85
	case 86:
		goto st_case_86
	}
	goto st_out
	st1:
		if p++; p == pe {
			goto _test_eof1
		}
	st_case_1:
		switch data[p] {
		case 9:
			goto st1
		case 32:
			goto st1
		case 60:
			goto tr2
		case 95:
			goto tr3
		}
		goto tr0
tr0:
//line parse_actions.rl:75

		if p < len(data) {
			if r := data[p]; r < unicode.MaxASCII {
				return s, fmt.Errorf("%w: unexpected rune %q at %d", ErrInvalid, data[p], p)
			} else {
				return s, fmt.Errorf("%w: unexpected rune %q (\\u%04[2]x) at %d", ErrInvalid, data[p], p)
			}
		}
		return s, ErrIncomplete
	
	goto st0
//line parse.go:275
st_case_0:
	st0:
		cs = 0
		goto _out
tr2:
//line parse_actions.rl:8

		subject = p
	
	goto st2
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
//line parse.go:291
		switch data[p] {
		case 62:
			goto tr5
		case 92:
			goto tr6
		case 95:
			goto tr4
		case 126:
			goto tr4
		}
		switch {
		case data[p] < 61:
			if 33 <= data[p] && data[p] <= 59 {
				goto tr4
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto tr4
				}
			case data[p] >= 97:
				goto tr4
			}
		default:
			goto tr4
		}
		goto tr0
tr4:
//line parse_actions.rl:24

		iri = p
	
	goto st3
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
//line parse.go:331
		switch data[p] {
		case 62:
			goto tr8
		case 92:
			goto st74
		case 95:
			goto st3
		case 126:
			goto st3
		}
		switch {
		case data[p] < 61:
			if 33 <= data[p] && data[p] <= 59 {
				goto st3
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto st3
				}
			case data[p] >= 97:
				goto st3
			}
		default:
			goto st3
		}
		goto tr0
tr5:
//line parse_actions.rl:24

		iri = p
	
//line parse_actions.rl:56

		if iri < 0 {
			panic("unexpected parser state: iri start not set")
		}
		switch u, err := url.Parse(string(data[iri:p])); {
		case err != nil:
			return s, err
		case !u.IsAbs():
			return s, fmt.Errorf("%w: relative IRI ref %q", ErrInvalid, string(data[iri:p]))
		}
	
	goto st4
tr8:
//line parse_actions.rl:56

		if iri < 0 {
			panic("unexpected parser state: iri start not set")
		}
		switch u, err := url.Parse(string(data[iri:p])); {
		case err != nil:
			return s, err
		case !u.IsAbs():
			return s, fmt.Errorf("%w: relative IRI ref %q", ErrInvalid, string(data[iri:p]))
		}
	
	goto st4
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
//line parse.go:397
		switch data[p] {
		case 9:
			goto tr10
		case 32:
			goto tr10
		case 60:
			goto tr11
		}
		goto tr0
tr10:
//line parse_actions.rl:28

		if subject < 0 {
			panic("unexpected parser state: subject start not set")
		}
		s.Subject.Value = string(data[subject:p])
	
	goto st5
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
//line parse.go:421
		switch data[p] {
		case 9:
			goto st5
		case 32:
			goto st5
		case 60:
			goto tr13
		}
		goto tr0
tr11:
//line parse_actions.rl:28

		if subject < 0 {
			panic("unexpected parser state: subject start not set")
		}
		s.Subject.Value = string(data[subject:p])
	
//line parse_actions.rl:12

		predicate = p
	
	goto st6
tr13:
//line parse_actions.rl:12

		predicate = p
	
	goto st6
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
//line parse.go:455
		switch data[p] {
		case 62:
			goto tr15
		case 92:
			goto tr16
		case 95:
			goto tr14
		case 126:
			goto tr14
		}
		switch {
		case data[p] < 61:
			if 33 <= data[p] && data[p] <= 59 {
				goto tr14
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto tr14
				}
			case data[p] >= 97:
				goto tr14
			}
		default:
			goto tr14
		}
		goto tr0
tr14:
//line parse_actions.rl:24

		iri = p
	
	goto st7
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
//line parse.go:495
		switch data[p] {
		case 62:
			goto tr18
		case 92:
			goto st65
		case 95:
			goto st7
		case 126:
			goto st7
		}
		switch {
		case data[p] < 61:
			if 33 <= data[p] && data[p] <= 59 {
				goto st7
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto st7
				}
			case data[p] >= 97:
				goto st7
			}
		default:
			goto st7
		}
		goto tr0
tr15:
//line parse_actions.rl:24

		iri = p
	
//line parse_actions.rl:56

		if iri < 0 {
			panic("unexpected parser state: iri start not set")
		}
		switch u, err := url.Parse(string(data[iri:p])); {
		case err != nil:
			return s, err
		case !u.IsAbs():
			return s, fmt.Errorf("%w: relative IRI ref %q", ErrInvalid, string(data[iri:p]))
		}
	
	goto st8
tr18:
//line parse_actions.rl:56

		if iri < 0 {
			panic("unexpected parser state: iri start not set")
		}
		switch u, err := url.Parse(string(data[iri:p])); {
		case err != nil:
			return s, err
		case !u.IsAbs():
			return s, fmt.Errorf("%w: relative IRI ref %q", ErrInvalid, string(data[iri:p]))
		}
	
	goto st8
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
//line parse.go:561
		switch data[p] {
		case 9:
			goto tr20
		case 32:
			goto tr20
		case 34:
			goto tr21
		case 60:
			goto tr22
		case 95:
			goto tr23
		}
		goto tr0
tr20:
//line parse_actions.rl:35

		if predicate < 0 {
			panic("unexpected parser state: predicate start not set")
		}
		s.Predicate.Value = string(data[predicate:p])
	
	goto st9
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
//line parse.go:589
		switch data[p] {
		case 9:
			goto st9
		case 32:
			goto st9
		case 34:
			goto tr25
		case 60:
			goto tr26
		case 95:
			goto tr27
		}
		goto tr0
tr21:
//line parse_actions.rl:35

		if predicate < 0 {
			panic("unexpected parser state: predicate start not set")
		}
		s.Predicate.Value = string(data[predicate:p])
	
//line parse_actions.rl:16

		object = p
	
	goto st10
tr25:
//line parse_actions.rl:16

		object = p
	
	goto st10
	st10:
		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
//line parse.go:627
		switch data[p] {
		case 34:
			goto st11
		case 92:
			goto st48
		}
		switch {
		case data[p] < 11:
			if 0 <= data[p] && data[p] <= 9 {
				goto st10
			}
		case data[p] > 12:
			if 14 <= data[p] && data[p] <= 1114111 {
				goto st10
			}
		default:
			goto st10
		}
		goto tr0
	st11:
		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
		switch data[p] {
		case 9:
			goto tr31
		case 32:
			goto tr31
		case 46:
			goto tr32
		case 60:
			goto tr33
		case 64:
			goto st30
		case 94:
			goto st34
		case 95:
			goto tr36
		}
		goto tr0
tr31:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
	goto st12
tr97:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
//line parse_actions.rl:49

		if label < 0 {
			panic("unexpected parser state: label start not set")
		}
		s.Label.Value = string(data[label:p])
	
	goto st12
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
//line parse.go:699
		switch data[p] {
		case 9:
			goto st12
		case 32:
			goto st12
		case 46:
			goto st87
		case 60:
			goto tr39
		case 95:
			goto tr40
		}
		goto tr0
tr32:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
	goto st87
tr48:
//line parse_actions.rl:49

		if label < 0 {
			panic("unexpected parser state: label start not set")
		}
		s.Label.Value = string(data[label:p])
	
	goto st87
	st87:
		if p++; p == pe {
			goto _test_eof87
		}
	st_case_87:
//line parse.go:736
		switch data[p] {
		case 9:
			goto st87
		case 32:
			goto st87
		case 35:
			goto tr120
		}
		goto st0
tr120:
//line parse_actions.rl:72

	
	goto st88
	st88:
		if p++; p == pe {
			goto _test_eof88
		}
	st_case_88:
//line parse.go:756
		goto st88
tr33:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
//line parse_actions.rl:20

		label = p
	
	goto st13
tr39:
//line parse_actions.rl:20

		label = p
	
	goto st13
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
//line parse.go:782
		switch data[p] {
		case 62:
			goto tr42
		case 92:
			goto tr43
		case 95:
			goto tr41
		case 126:
			goto tr41
		}
		switch {
		case data[p] < 61:
			if 33 <= data[p] && data[p] <= 59 {
				goto tr41
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto tr41
				}
			case data[p] >= 97:
				goto tr41
			}
		default:
			goto tr41
		}
		goto tr0
tr41:
//line parse_actions.rl:24

		iri = p
	
	goto st14
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
//line parse.go:822
		switch data[p] {
		case 62:
			goto tr45
		case 92:
			goto st17
		case 95:
			goto st14
		case 126:
			goto st14
		}
		switch {
		case data[p] < 61:
			if 33 <= data[p] && data[p] <= 59 {
				goto st14
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto st14
				}
			case data[p] >= 97:
				goto st14
			}
		default:
			goto st14
		}
		goto tr0
tr42:
//line parse_actions.rl:24

		iri = p
	
//line parse_actions.rl:56

		if iri < 0 {
			panic("unexpected parser state: iri start not set")
		}
		switch u, err := url.Parse(string(data[iri:p])); {
		case err != nil:
			return s, err
		case !u.IsAbs():
			return s, fmt.Errorf("%w: relative IRI ref %q", ErrInvalid, string(data[iri:p]))
		}
	
	goto st15
tr45:
//line parse_actions.rl:56

		if iri < 0 {
			panic("unexpected parser state: iri start not set")
		}
		switch u, err := url.Parse(string(data[iri:p])); {
		case err != nil:
			return s, err
		case !u.IsAbs():
			return s, fmt.Errorf("%w: relative IRI ref %q", ErrInvalid, string(data[iri:p]))
		}
	
	goto st15
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
//line parse.go:888
		switch data[p] {
		case 9:
			goto tr47
		case 32:
			goto tr47
		case 46:
			goto tr48
		}
		goto tr0
tr47:
//line parse_actions.rl:49

		if label < 0 {
			panic("unexpected parser state: label start not set")
		}
		s.Label.Value = string(data[label:p])
	
	goto st16
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
//line parse.go:912
		switch data[p] {
		case 9:
			goto st16
		case 32:
			goto st16
		case 46:
			goto st87
		}
		goto tr0
tr43:
//line parse_actions.rl:24

		iri = p
	
	goto st17
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
//line parse.go:933
		switch data[p] {
		case 85:
			goto st18
		case 117:
			goto st22
		}
		goto tr0
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st19
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st19
			}
		default:
			goto st19
		}
		goto tr0
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st20
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st20
			}
		default:
			goto st20
		}
		goto tr0
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st21
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st21
			}
		default:
			goto st21
		}
		goto tr0
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st22
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st22
			}
		default:
			goto st22
		}
		goto tr0
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st23
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st23
			}
		default:
			goto st23
		}
		goto tr0
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st24
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st24
			}
		default:
			goto st24
		}
		goto tr0
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st25
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st25
			}
		default:
			goto st25
		}
		goto tr0
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st14
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st14
			}
		default:
			goto st14
		}
		goto tr0
tr36:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
//line parse_actions.rl:20

		label = p
	
	goto st26
tr40:
//line parse_actions.rl:20

		label = p
	
	goto st26
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
//line parse.go:1109
		if data[p] == 58 {
			goto st27
		}
		goto tr0
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
		if data[p] == 95 {
			goto st28
		}
		switch {
		case data[p] < 895:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st28
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st28
					}
				default:
					goto st28
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st28
					}
				case data[p] > 767:
					if 880 <= data[p] && data[p] <= 893 {
						goto st28
					}
				default:
					goto st28
				}
			default:
				goto st28
			}
		case data[p] > 8191:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8204 <= data[p] && data[p] <= 8205 {
						goto st28
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st28
					}
				default:
					goto st28
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st28
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st28
					}
				default:
					goto st28
				}
			default:
				goto st28
			}
		default:
			goto st28
		}
		goto tr0
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
		switch data[p] {
		case 9:
			goto tr47
		case 32:
			goto tr47
		case 45:
			goto st28
		case 46:
			goto tr60
		case 95:
			goto st28
		case 183:
			goto st28
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st28
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st28
					}
				default:
					goto st28
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st28
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st28
					}
				default:
					goto st28
				}
			default:
				goto st28
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st28
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st28
					}
				default:
					goto st28
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st28
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st28
					}
				default:
					goto st28
				}
			default:
				goto st28
			}
		default:
			goto st28
		}
		goto tr0
tr60:
//line parse_actions.rl:49

		if label < 0 {
			panic("unexpected parser state: label start not set")
		}
		s.Label.Value = string(data[label:p])
	
	goto st89
	st89:
		if p++; p == pe {
			goto _test_eof89
		}
	st_case_89:
//line parse.go:1289
		switch data[p] {
		case 9:
			goto st87
		case 32:
			goto st87
		case 35:
			goto tr120
		case 45:
			goto st28
		case 46:
			goto st29
		case 95:
			goto st28
		case 183:
			goto st28
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st28
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st28
					}
				default:
					goto st28
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st28
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st28
					}
				default:
					goto st28
				}
			default:
				goto st28
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st28
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st28
					}
				default:
					goto st28
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st28
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st28
					}
				default:
					goto st28
				}
			default:
				goto st28
			}
		default:
			goto st28
		}
		goto st0
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
		switch data[p] {
		case 45:
			goto st28
		case 46:
			goto st29
		case 95:
			goto st28
		case 183:
			goto st28
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st28
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st28
					}
				default:
					goto st28
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st28
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st28
					}
				default:
					goto st28
				}
			default:
				goto st28
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st28
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st28
					}
				default:
					goto st28
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st28
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st28
					}
				default:
					goto st28
				}
			default:
				goto st28
			}
		default:
			goto st28
		}
		goto tr0
	st30:
		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
		switch {
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto st31
			}
		case data[p] >= 65:
			goto st31
		}
		goto tr0
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
		switch data[p] {
		case 9:
			goto tr31
		case 32:
			goto tr31
		case 45:
			goto st32
		case 46:
			goto tr32
		case 60:
			goto tr33
		case 95:
			goto tr36
		}
		switch {
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto st31
			}
		case data[p] >= 65:
			goto st31
		}
		goto tr0
	st32:
		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st33
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto st33
			}
		default:
			goto st33
		}
		goto tr0
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
		switch data[p] {
		case 9:
			goto tr31
		case 32:
			goto tr31
		case 45:
			goto st32
		case 46:
			goto tr32
		case 60:
			goto tr33
		case 95:
			goto tr36
		}
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st33
			}
		case data[p] > 90:
			if 97 <= data[p] && data[p] <= 122 {
				goto st33
			}
		default:
			goto st33
		}
		goto tr0
	st34:
		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
		if data[p] == 94 {
			goto st35
		}
		goto tr0
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
		if data[p] == 60 {
			goto st36
		}
		goto tr0
tr22:
//line parse_actions.rl:35

		if predicate < 0 {
			panic("unexpected parser state: predicate start not set")
		}
		s.Predicate.Value = string(data[predicate:p])
	
//line parse_actions.rl:16

		object = p
	
	goto st36
tr26:
//line parse_actions.rl:16

		object = p
	
	goto st36
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
//line parse.go:1589
		switch data[p] {
		case 62:
			goto tr68
		case 92:
			goto tr69
		case 95:
			goto tr67
		case 126:
			goto tr67
		}
		switch {
		case data[p] < 61:
			if 33 <= data[p] && data[p] <= 59 {
				goto tr67
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto tr67
				}
			case data[p] >= 97:
				goto tr67
			}
		default:
			goto tr67
		}
		goto tr0
tr67:
//line parse_actions.rl:24

		iri = p
	
	goto st37
	st37:
		if p++; p == pe {
			goto _test_eof37
		}
	st_case_37:
//line parse.go:1629
		switch data[p] {
		case 62:
			goto tr71
		case 92:
			goto st39
		case 95:
			goto st37
		case 126:
			goto st37
		}
		switch {
		case data[p] < 61:
			if 33 <= data[p] && data[p] <= 59 {
				goto st37
			}
		case data[p] > 93:
			switch {
			case data[p] > 122:
				if 128 <= data[p] && data[p] <= 1114111 {
					goto st37
				}
			case data[p] >= 97:
				goto st37
			}
		default:
			goto st37
		}
		goto tr0
tr68:
//line parse_actions.rl:24

		iri = p
	
//line parse_actions.rl:56

		if iri < 0 {
			panic("unexpected parser state: iri start not set")
		}
		switch u, err := url.Parse(string(data[iri:p])); {
		case err != nil:
			return s, err
		case !u.IsAbs():
			return s, fmt.Errorf("%w: relative IRI ref %q", ErrInvalid, string(data[iri:p]))
		}
	
	goto st38
tr71:
//line parse_actions.rl:56

		if iri < 0 {
			panic("unexpected parser state: iri start not set")
		}
		switch u, err := url.Parse(string(data[iri:p])); {
		case err != nil:
			return s, err
		case !u.IsAbs():
			return s, fmt.Errorf("%w: relative IRI ref %q", ErrInvalid, string(data[iri:p]))
		}
	
	goto st38
	st38:
		if p++; p == pe {
			goto _test_eof38
		}
	st_case_38:
//line parse.go:1695
		switch data[p] {
		case 9:
			goto tr31
		case 32:
			goto tr31
		case 46:
			goto tr32
		case 60:
			goto tr33
		case 95:
			goto tr36
		}
		goto tr0
tr69:
//line parse_actions.rl:24

		iri = p
	
	goto st39
	st39:
		if p++; p == pe {
			goto _test_eof39
		}
	st_case_39:
//line parse.go:1720
		switch data[p] {
		case 85:
			goto st40
		case 117:
			goto st44
		}
		goto tr0
	st40:
		if p++; p == pe {
			goto _test_eof40
		}
	st_case_40:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st41
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st41
			}
		default:
			goto st41
		}
		goto tr0
	st41:
		if p++; p == pe {
			goto _test_eof41
		}
	st_case_41:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st42
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st42
			}
		default:
			goto st42
		}
		goto tr0
	st42:
		if p++; p == pe {
			goto _test_eof42
		}
	st_case_42:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st43
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st43
			}
		default:
			goto st43
		}
		goto tr0
	st43:
		if p++; p == pe {
			goto _test_eof43
		}
	st_case_43:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st44
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st44
			}
		default:
			goto st44
		}
		goto tr0
	st44:
		if p++; p == pe {
			goto _test_eof44
		}
	st_case_44:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st45
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st45
			}
		default:
			goto st45
		}
		goto tr0
	st45:
		if p++; p == pe {
			goto _test_eof45
		}
	st_case_45:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st46
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st46
			}
		default:
			goto st46
		}
		goto tr0
	st46:
		if p++; p == pe {
			goto _test_eof46
		}
	st_case_46:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st47
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st47
			}
		default:
			goto st47
		}
		goto tr0
	st47:
		if p++; p == pe {
			goto _test_eof47
		}
	st_case_47:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st37
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st37
			}
		default:
			goto st37
		}
		goto tr0
	st48:
		if p++; p == pe {
			goto _test_eof48
		}
	st_case_48:
		switch data[p] {
		case 34:
			goto st10
		case 39:
			goto st10
		case 85:
			goto st49
		case 92:
			goto st10
		case 98:
			goto st10
		case 102:
			goto st10
		case 110:
			goto st10
		case 114:
			goto st10
		case 116:
			goto st10
		case 117:
			goto st53
		}
		goto tr0
	st49:
		if p++; p == pe {
			goto _test_eof49
		}
	st_case_49:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st50
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st50
			}
		default:
			goto st50
		}
		goto tr0
	st50:
		if p++; p == pe {
			goto _test_eof50
		}
	st_case_50:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st51
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st51
			}
		default:
			goto st51
		}
		goto tr0
	st51:
		if p++; p == pe {
			goto _test_eof51
		}
	st_case_51:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st52
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st52
			}
		default:
			goto st52
		}
		goto tr0
	st52:
		if p++; p == pe {
			goto _test_eof52
		}
	st_case_52:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st53
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st53
			}
		default:
			goto st53
		}
		goto tr0
	st53:
		if p++; p == pe {
			goto _test_eof53
		}
	st_case_53:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st54
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st54
			}
		default:
			goto st54
		}
		goto tr0
	st54:
		if p++; p == pe {
			goto _test_eof54
		}
	st_case_54:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st55
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st55
			}
		default:
			goto st55
		}
		goto tr0
	st55:
		if p++; p == pe {
			goto _test_eof55
		}
	st_case_55:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st56
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st56
			}
		default:
			goto st56
		}
		goto tr0
	st56:
		if p++; p == pe {
			goto _test_eof56
		}
	st_case_56:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st10
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st10
			}
		default:
			goto st10
		}
		goto tr0
tr23:
//line parse_actions.rl:35

		if predicate < 0 {
			panic("unexpected parser state: predicate start not set")
		}
		s.Predicate.Value = string(data[predicate:p])
	
//line parse_actions.rl:16

		object = p
	
	goto st57
tr27:
//line parse_actions.rl:16

		object = p
	
	goto st57
	st57:
		if p++; p == pe {
			goto _test_eof57
		}
	st_case_57:
//line parse.go:2068
		if data[p] == 58 {
			goto st58
		}
		goto tr0
	st58:
		if p++; p == pe {
			goto _test_eof58
		}
	st_case_58:
		if data[p] == 95 {
			goto st59
		}
		switch {
		case data[p] < 895:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st59
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st59
					}
				case data[p] > 767:
					if 880 <= data[p] && data[p] <= 893 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		case data[p] > 8191:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8204 <= data[p] && data[p] <= 8205 {
						goto st59
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st59
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		default:
			goto st59
		}
		goto tr0
	st59:
		if p++; p == pe {
			goto _test_eof59
		}
	st_case_59:
		switch data[p] {
		case 9:
			goto tr31
		case 32:
			goto tr31
		case 45:
			goto st59
		case 46:
			goto tr91
		case 60:
			goto tr33
		case 95:
			goto tr92
		case 183:
			goto st59
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st59
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st59
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st59
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st59
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		default:
			goto st59
		}
		goto tr0
tr91:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
	goto st90
	st90:
		if p++; p == pe {
			goto _test_eof90
		}
	st_case_90:
//line parse.go:2250
		switch data[p] {
		case 9:
			goto st87
		case 32:
			goto st87
		case 35:
			goto tr120
		case 45:
			goto st59
		case 46:
			goto st60
		case 95:
			goto st59
		case 183:
			goto st59
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st59
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st59
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st59
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st59
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		default:
			goto st59
		}
		goto st0
	st60:
		if p++; p == pe {
			goto _test_eof60
		}
	st_case_60:
		switch data[p] {
		case 45:
			goto st59
		case 46:
			goto st60
		case 95:
			goto st59
		case 183:
			goto st59
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st59
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st59
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st59
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st59
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		default:
			goto st59
		}
		goto tr0
tr92:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
//line parse_actions.rl:20

		label = p
	
	goto st61
	st61:
		if p++; p == pe {
			goto _test_eof61
		}
	st_case_61:
//line parse.go:2434
		switch data[p] {
		case 9:
			goto tr31
		case 32:
			goto tr31
		case 45:
			goto st59
		case 46:
			goto tr91
		case 58:
			goto st62
		case 60:
			goto tr33
		case 95:
			goto tr92
		case 183:
			goto st59
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 57 {
						goto st59
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st59
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st59
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st59
					}
				default:
					goto st59
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st59
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st59
					}
				default:
					goto st59
				}
			default:
				goto st59
			}
		default:
			goto st59
		}
		goto tr0
	st62:
		if p++; p == pe {
			goto _test_eof62
		}
	st_case_62:
		switch data[p] {
		case 9:
			goto tr31
		case 32:
			goto tr31
		case 45:
			goto st59
		case 46:
			goto tr91
		case 60:
			goto tr33
		case 95:
			goto tr96
		case 183:
			goto st59
		}
		switch {
		case data[p] < 895:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st63
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st63
					}
				default:
					goto st63
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st63
					}
				case data[p] > 767:
					switch {
					case data[p] > 879:
						if 880 <= data[p] && data[p] <= 893 {
							goto st63
						}
					case data[p] >= 768:
						goto st59
					}
				default:
					goto st63
				}
			default:
				goto st63
			}
		case data[p] > 8191:
			switch {
			case data[p] < 11264:
				switch {
				case data[p] < 8255:
					if 8204 <= data[p] && data[p] <= 8205 {
						goto st63
					}
				case data[p] > 8256:
					if 8304 <= data[p] && data[p] <= 8591 {
						goto st63
					}
				default:
					goto st59
				}
			case data[p] > 12271:
				switch {
				case data[p] < 63744:
					if 12289 <= data[p] && data[p] <= 55295 {
						goto st63
					}
				case data[p] > 64975:
					switch {
					case data[p] > 65533:
						if 65536 <= data[p] && data[p] <= 983039 {
							goto st63
						}
					case data[p] >= 65008:
						goto st63
					}
				default:
					goto st63
				}
			default:
				goto st63
			}
		default:
			goto st63
		}
		goto tr0
tr96:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
//line parse_actions.rl:20

		label = p
	
	goto st63
	st63:
		if p++; p == pe {
			goto _test_eof63
		}
	st_case_63:
//line parse.go:2636
		switch data[p] {
		case 9:
			goto tr97
		case 32:
			goto tr97
		case 45:
			goto st63
		case 46:
			goto tr98
		case 60:
			goto tr33
		case 95:
			goto tr96
		case 183:
			goto st63
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st63
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st63
					}
				default:
					goto st63
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st63
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st63
					}
				default:
					goto st63
				}
			default:
				goto st63
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st63
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st63
					}
				default:
					goto st63
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st63
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st63
					}
				default:
					goto st63
				}
			default:
				goto st63
			}
		default:
			goto st63
		}
		goto tr0
tr98:
//line parse_actions.rl:42

		if object < 0 {
			panic("unexpected parser state: object start not set")
		}
		s.Object.Value = string(data[object:p])
	
//line parse_actions.rl:49

		if label < 0 {
			panic("unexpected parser state: label start not set")
		}
		s.Label.Value = string(data[label:p])
	
	goto st91
	st91:
		if p++; p == pe {
			goto _test_eof91
		}
	st_case_91:
//line parse.go:2741
		switch data[p] {
		case 9:
			goto st87
		case 32:
			goto st87
		case 35:
			goto tr120
		case 45:
			goto st63
		case 46:
			goto st64
		case 95:
			goto st63
		case 183:
			goto st63
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st63
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st63
					}
				default:
					goto st63
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st63
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st63
					}
				default:
					goto st63
				}
			default:
				goto st63
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st63
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st63
					}
				default:
					goto st63
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st63
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st63
					}
				default:
					goto st63
				}
			default:
				goto st63
			}
		default:
			goto st63
		}
		goto st0
	st64:
		if p++; p == pe {
			goto _test_eof64
		}
	st_case_64:
		switch data[p] {
		case 45:
			goto st63
		case 46:
			goto st64
		case 95:
			goto st63
		case 183:
			goto st63
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st63
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st63
					}
				default:
					goto st63
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st63
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st63
					}
				default:
					goto st63
				}
			default:
				goto st63
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st63
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st63
					}
				default:
					goto st63
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st63
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st63
					}
				default:
					goto st63
				}
			default:
				goto st63
			}
		default:
			goto st63
		}
		goto tr0
tr16:
//line parse_actions.rl:24

		iri = p
	
	goto st65
	st65:
		if p++; p == pe {
			goto _test_eof65
		}
	st_case_65:
//line parse.go:2918
		switch data[p] {
		case 85:
			goto st66
		case 117:
			goto st70
		}
		goto tr0
	st66:
		if p++; p == pe {
			goto _test_eof66
		}
	st_case_66:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st67
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st67
			}
		default:
			goto st67
		}
		goto tr0
	st67:
		if p++; p == pe {
			goto _test_eof67
		}
	st_case_67:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st68
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st68
			}
		default:
			goto st68
		}
		goto tr0
	st68:
		if p++; p == pe {
			goto _test_eof68
		}
	st_case_68:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st69
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st69
			}
		default:
			goto st69
		}
		goto tr0
	st69:
		if p++; p == pe {
			goto _test_eof69
		}
	st_case_69:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st70
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st70
			}
		default:
			goto st70
		}
		goto tr0
	st70:
		if p++; p == pe {
			goto _test_eof70
		}
	st_case_70:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st71
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st71
			}
		default:
			goto st71
		}
		goto tr0
	st71:
		if p++; p == pe {
			goto _test_eof71
		}
	st_case_71:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st72
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st72
			}
		default:
			goto st72
		}
		goto tr0
	st72:
		if p++; p == pe {
			goto _test_eof72
		}
	st_case_72:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st73
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st73
			}
		default:
			goto st73
		}
		goto tr0
	st73:
		if p++; p == pe {
			goto _test_eof73
		}
	st_case_73:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st7
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st7
			}
		default:
			goto st7
		}
		goto tr0
tr6:
//line parse_actions.rl:24

		iri = p
	
	goto st74
	st74:
		if p++; p == pe {
			goto _test_eof74
		}
	st_case_74:
//line parse.go:3081
		switch data[p] {
		case 85:
			goto st75
		case 117:
			goto st79
		}
		goto tr0
	st75:
		if p++; p == pe {
			goto _test_eof75
		}
	st_case_75:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st76
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st76
			}
		default:
			goto st76
		}
		goto tr0
	st76:
		if p++; p == pe {
			goto _test_eof76
		}
	st_case_76:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st77
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st77
			}
		default:
			goto st77
		}
		goto tr0
	st77:
		if p++; p == pe {
			goto _test_eof77
		}
	st_case_77:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st78
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st78
			}
		default:
			goto st78
		}
		goto tr0
	st78:
		if p++; p == pe {
			goto _test_eof78
		}
	st_case_78:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st79
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st79
			}
		default:
			goto st79
		}
		goto tr0
	st79:
		if p++; p == pe {
			goto _test_eof79
		}
	st_case_79:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st80
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st80
			}
		default:
			goto st80
		}
		goto tr0
	st80:
		if p++; p == pe {
			goto _test_eof80
		}
	st_case_80:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st81
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st81
			}
		default:
			goto st81
		}
		goto tr0
	st81:
		if p++; p == pe {
			goto _test_eof81
		}
	st_case_81:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st82
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st82
			}
		default:
			goto st82
		}
		goto tr0
	st82:
		if p++; p == pe {
			goto _test_eof82
		}
	st_case_82:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st3
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st3
			}
		default:
			goto st3
		}
		goto tr0
tr3:
//line parse_actions.rl:8

		subject = p
	
	goto st83
	st83:
		if p++; p == pe {
			goto _test_eof83
		}
	st_case_83:
//line parse.go:3244
		if data[p] == 58 {
			goto st84
		}
		goto tr0
	st84:
		if p++; p == pe {
			goto _test_eof84
		}
	st_case_84:
		if data[p] == 95 {
			goto st85
		}
		switch {
		case data[p] < 895:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st85
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st85
					}
				default:
					goto st85
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st85
					}
				case data[p] > 767:
					if 880 <= data[p] && data[p] <= 893 {
						goto st85
					}
				default:
					goto st85
				}
			default:
				goto st85
			}
		case data[p] > 8191:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8204 <= data[p] && data[p] <= 8205 {
						goto st85
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st85
					}
				default:
					goto st85
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st85
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st85
					}
				default:
					goto st85
				}
			default:
				goto st85
			}
		default:
			goto st85
		}
		goto tr0
	st85:
		if p++; p == pe {
			goto _test_eof85
		}
	st_case_85:
		switch data[p] {
		case 9:
			goto tr10
		case 32:
			goto tr10
		case 45:
			goto st85
		case 46:
			goto st86
		case 60:
			goto tr11
		case 95:
			goto st85
		case 183:
			goto st85
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st85
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st85
					}
				default:
					goto st85
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st85
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st85
					}
				default:
					goto st85
				}
			default:
				goto st85
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st85
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st85
					}
				default:
					goto st85
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st85
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st85
					}
				default:
					goto st85
				}
			default:
				goto st85
			}
		default:
			goto st85
		}
		goto tr0
	st86:
		if p++; p == pe {
			goto _test_eof86
		}
	st_case_86:
		switch data[p] {
		case 45:
			goto st85
		case 46:
			goto st86
		case 95:
			goto st85
		case 183:
			goto st85
		}
		switch {
		case data[p] < 8204:
			switch {
			case data[p] < 192:
				switch {
				case data[p] < 65:
					if 48 <= data[p] && data[p] <= 58 {
						goto st85
					}
				case data[p] > 90:
					if 97 <= data[p] && data[p] <= 122 {
						goto st85
					}
				default:
					goto st85
				}
			case data[p] > 214:
				switch {
				case data[p] < 248:
					if 216 <= data[p] && data[p] <= 246 {
						goto st85
					}
				case data[p] > 893:
					if 895 <= data[p] && data[p] <= 8191 {
						goto st85
					}
				default:
					goto st85
				}
			default:
				goto st85
			}
		case data[p] > 8205:
			switch {
			case data[p] < 12289:
				switch {
				case data[p] < 8304:
					if 8255 <= data[p] && data[p] <= 8256 {
						goto st85
					}
				case data[p] > 8591:
					if 11264 <= data[p] && data[p] <= 12271 {
						goto st85
					}
				default:
					goto st85
				}
			case data[p] > 55295:
				switch {
				case data[p] < 65008:
					if 63744 <= data[p] && data[p] <= 64975 {
						goto st85
					}
				case data[p] > 65533:
					if 65536 <= data[p] && data[p] <= 983039 {
						goto st85
					}
				default:
					goto st85
				}
			default:
				goto st85
			}
		default:
			goto st85
		}
		goto tr0
	st_out:
	_test_eof1: cs = 1; goto _test_eof
	_test_eof2: cs = 2; goto _test_eof
	_test_eof3: cs = 3; goto _test_eof
	_test_eof4: cs = 4; goto _test_eof
	_test_eof5: cs = 5; goto _test_eof
	_test_eof6: cs = 6; goto _test_eof
	_test_eof7: cs = 7; goto _test_eof
	_test_eof8: cs = 8; goto _test_eof
	_test_eof9: cs = 9; goto _test_eof
	_test_eof10: cs = 10; goto _test_eof
	_test_eof11: cs = 11; goto _test_eof
	_test_eof12: cs = 12; goto _test_eof
	_test_eof87: cs = 87; goto _test_eof
	_test_eof88: cs = 88; goto _test_eof
	_test_eof13: cs = 13; goto _test_eof
	_test_eof14: cs = 14; goto _test_eof
	_test_eof15: cs = 15; goto _test_eof
	_test_eof16: cs = 16; goto _test_eof
	_test_eof17: cs = 17; goto _test_eof
	_test_eof18: cs = 18; goto _test_eof
	_test_eof19: cs = 19; goto _test_eof
	_test_eof20: cs = 20; goto _test_eof
	_test_eof21: cs = 21; goto _test_eof
	_test_eof22: cs = 22; goto _test_eof
	_test_eof23: cs = 23; goto _test_eof
	_test_eof24: cs = 24; goto _test_eof
	_test_eof25: cs = 25; goto _test_eof
	_test_eof26: cs = 26; goto _test_eof
	_test_eof27: cs = 27; goto _test_eof
	_test_eof28: cs = 28; goto _test_eof
	_test_eof89: cs = 89; goto _test_eof
	_test_eof29: cs = 29; goto _test_eof
	_test_eof30: cs = 30; goto _test_eof
	_test_eof31: cs = 31; goto _test_eof
	_test_eof32: cs = 32; goto _test_eof
	_test_eof33: cs = 33; goto _test_eof
	_test_eof34: cs = 34; goto _test_eof
	_test_eof35: cs = 35; goto _test_eof
	_test_eof36: cs = 36; goto _test_eof
	_test_eof37: cs = 37; goto _test_eof
	_test_eof38: cs = 38; goto _test_eof
	_test_eof39: cs = 39; goto _test_eof
	_test_eof40: cs = 40; goto _test_eof
	_test_eof41: cs = 41; goto _test_eof
	_test_eof42: cs = 42; goto _test_eof
	_test_eof43: cs = 43; goto _test_eof
	_test_eof44: cs = 44; goto _test_eof
	_test_eof45: cs = 45; goto _test_eof
	_test_eof46: cs = 46; goto _test_eof
	_test_eof47: cs = 47; goto _test_eof
	_test_eof48: cs = 48; goto _test_eof
	_test_eof49: cs = 49; goto _test_eof
	_test_eof50: cs = 50; goto _test_eof
	_test_eof51: cs = 51; goto _test_eof
	_test_eof52: cs = 52; goto _test_eof
	_test_eof53: cs = 53; goto _test_eof
	_test_eof54: cs = 54; goto _test_eof
	_test_eof55: cs = 55; goto _test_eof
	_test_eof56: cs = 56; goto _test_eof
	_test_eof57: cs = 57; goto _test_eof
	_test_eof58: cs = 58; goto _test_eof
	_test_eof59: cs = 59; goto _test_eof
	_test_eof90: cs = 90; goto _test_eof
	_test_eof60: cs = 60; goto _test_eof
	_test_eof61: cs = 61; goto _test_eof
	_test_eof62: cs = 62; goto _test_eof
	_test_eof63: cs = 63; goto _test_eof
	_test_eof91: cs = 91; goto _test_eof
	_test_eof64: cs = 64; goto _test_eof
	_test_eof65: cs = 65; goto _test_eof
	_test_eof66: cs = 66; goto _test_eof
	_test_eof67: cs = 67; goto _test_eof
	_test_eof68: cs = 68; goto _test_eof
	_test_eof69: cs = 69; goto _test_eof
	_test_eof70: cs = 70; goto _test_eof
	_test_eof71: cs = 71; goto _test_eof
	_test_eof72: cs = 72; goto _test_eof
	_test_eof73: cs = 73; goto _test_eof
	_test_eof74: cs = 74; goto _test_eof
	_test_eof75: cs = 75; goto _test_eof
	_test_eof76: cs = 76; goto _test_eof
	_test_eof77: cs = 77; goto _test_eof
	_test_eof78: cs = 78; goto _test_eof
	_test_eof79: cs = 79; goto _test_eof
	_test_eof80: cs = 80; goto _test_eof
	_test_eof81: cs = 81; goto _test_eof
	_test_eof82: cs = 82; goto _test_eof
	_test_eof83: cs = 83; goto _test_eof
	_test_eof84: cs = 84; goto _test_eof
	_test_eof85: cs = 85; goto _test_eof
	_test_eof86: cs = 86; goto _test_eof

	_test_eof: {}
	if p == eof {
		switch cs {
		case 88:
//line parse_actions.rl:68

		return s, nil
	
		case 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86:
//line parse_actions.rl:75

		if p < len(data) {
			if r := data[p]; r < unicode.MaxASCII {
				return s, fmt.Errorf("%w: unexpected rune %q at %d", ErrInvalid, data[p], p)
			} else {
				return s, fmt.Errorf("%w: unexpected rune %q (\\u%04[2]x) at %d", ErrInvalid, data[p], p)
			}
		}
		return s, ErrIncomplete
	
		case 87, 89, 90, 91:
//line parse_actions.rl:72

	
//line parse_actions.rl:68

		return s, nil
	
//line parse.go:3615
		}
	}

	_out: {}
	}

//line parse.rl:51

	return Statement{}, ErrInvalid
}
