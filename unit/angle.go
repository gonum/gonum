// Code generated by "go generate gonum.org/v1/gonum/unit”; DO NOT EDIT.

// Copyright ©2014 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Angle represents an angle in radians.
type Angle float64

const (
	Yottarad Angle = 1e24
	Zettarad Angle = 1e21
	Exarad   Angle = 1e18
	Petarad  Angle = 1e15
	Terarad  Angle = 1e12
	Gigarad  Angle = 1e9
	Megarad  Angle = 1e6
	Kilorad  Angle = 1e3
	Hectorad Angle = 1e2
	Decarad  Angle = 1e1
	Rad      Angle = 1.0
	Decirad  Angle = 1e-1
	Centirad Angle = 1e-2
	Millirad Angle = 1e-3
	Microrad Angle = 1e-6
	Nanorad  Angle = 1e-9
	Picorad  Angle = 1e-12
	Femtorad Angle = 1e-15
	Attorad  Angle = 1e-18
	Zeptorad Angle = 1e-21
	Yoctorad Angle = 1e-24
)

// Unit converts the Angle to a *Unit
func (a Angle) Unit() *Unit {
	return New(float64(a), Dimensions{
		AngleDim: 1,
	})
}

// Angle allows Angle to implement a Angleer interface
func (a Angle) Angle() Angle {
	return a
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (a *Angle) From(u Uniter) error {
	if !DimensionsMatch(u, Rad) {
		*a = Angle(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*a = Angle(u.Unit().Value())
	return nil
}

func (a Angle) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", a, float64(a))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		w, wOk := fs.Width()
		const unit = " rad"
		switch {
		case pOk && wOk:
			fmt.Fprintf(fs, "%*.*"+string(c), pos(w-len(unit)), p, float64(a))
		case pOk:
			fmt.Fprintf(fs, "%.*"+string(c), p, float64(a))
		case wOk:
			fmt.Fprintf(fs, "%*"+string(c), pos(w-len(unit)), float64(a))
		default:
			fmt.Fprintf(fs, "%"+string(c), float64(a))
		}
		fmt.Fprint(fs, unit)
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g rad)", c, a, float64(a))
	}
}
