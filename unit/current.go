// Code generated by "go generate gonum.org/v1/gonum/unit”; DO NOT EDIT.

// Copyright ©2014 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
)

// Current represents a current in Ampers.
type Current float64

const (
	YottaAmper Current = 1e24
	ZettaAmper Current = 1e21
	ExaAmper   Current = 1e18
	PetaAmper  Current = 1e15
	TeraAmper  Current = 1e12
	GigaAmper  Current = 1e9
	MegaAmper  Current = 1e6
	KiloAmper  Current = 1e3
	HectoAmper Current = 1e2
	DecaAmper  Current = 1e1
	Amper      Current = 1.0
	DeciAmper  Current = 1e-1
	CentiAmper Current = 1e-2
	MilliAmper Current = 1e-3
	MicroAmper Current = 1e-6
	NanoAmper  Current = 1e-9
	PicoAmper  Current = 1e-12
	FemtoAmper Current = 1e-15
	AttoAmper  Current = 1e-18
	ZeptoAmper Current = 1e-21
	YoctoAmper Current = 1e-24
)

// Unit converts the Current to a *Unit
func (i Current) Unit() *Unit {
	return New(float64(i), Dimensions{
		CurrentDim: 1,
	})
}

// Current allows Current to implement a Currenter interface
func (i Current) Current() Current {
	return i
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (i *Current) From(u Uniter) error {
	if !DimensionsMatch(u, Amper) {
		*i = Current(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*i = Current(u.Unit().Value())
	return nil
}

func (i Current) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", i, float64(i))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		w, wOk := fs.Width()
		const unit = " A"
		switch {
		case pOk && wOk:
			fmt.Fprintf(fs, "%*.*"+string(c), pos(w-len(unit)), p, float64(i))
		case pOk:
			fmt.Fprintf(fs, "%.*"+string(c), p, float64(i))
		case wOk:
			fmt.Fprintf(fs, "%*"+string(c), pos(w-len(unit)), float64(i))
		default:
			fmt.Fprintf(fs, "%"+string(c), float64(i))
		}
		fmt.Fprint(fs, unit)
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g A)", c, i, float64(i))
	}
}
