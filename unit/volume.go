// Code generated by "go generate gonum.org/v1/gonum/unit”; DO NOT EDIT.

// Copyright ©2014 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package unit

import (
	"errors"
	"fmt"
	"math"
	"unicode/utf8"
)

// Volume represents a volume in cubic meters.
type Volume float64

const (
	Yottaliter Volume = 1e21
	Zettaliter Volume = 1e18
	Exaliter   Volume = 1e15
	Petaliter  Volume = 1e12
	Teraliter  Volume = 1e9
	Gigaliter  Volume = 1e6
	Megaliter  Volume = 1e3
	Kiloliter  Volume = 1.0
	Hectoliter Volume = 1e-1
	Decaliter  Volume = 1e-2
	Liter      Volume = 1e-3
	Deciliter  Volume = 1e-4
	Centiliter Volume = 1e-5
	Milliliter Volume = 1e-6
	Microliter Volume = 1e-9
	Nanoliter  Volume = 1e-12
	Picoliter  Volume = 1e-15
	Femtoliter Volume = 1e-18
	Attoliter  Volume = 1e-21
	Zeptoliter Volume = 1e-24
	Yoctoliter Volume = 1e-27
)

// Unit converts the Volume to a *Unit
func (v Volume) Unit() *Unit {
	return New(float64(v), Dimensions{
		LengthDim: 3,
	})
}

// Volume allows Volume to implement a Volumeer interface
func (v Volume) Volume() Volume {
	return v
}

// From converts the unit into the receiver. From returns an
// error if there is a mismatch in dimension
func (v *Volume) From(u Uniter) error {
	if !DimensionsMatch(u, Liter) {
		*v = Volume(math.NaN())
		return errors.New("Dimension mismatch")
	}
	*v = Volume(u.Unit().Value())
	return nil
}

func (v Volume) Format(fs fmt.State, c rune) {
	switch c {
	case 'v':
		if fs.Flag('#') {
			fmt.Fprintf(fs, "%T(%v)", v, float64(v))
			return
		}
		fallthrough
	case 'e', 'E', 'f', 'F', 'g', 'G':
		p, pOk := fs.Precision()
		w, wOk := fs.Width()
		const unit = " m^3"
		switch {
		case pOk && wOk:
			fmt.Fprintf(fs, "%*.*"+string(c), pos(w-utf8.RuneCount([]byte(unit))), p, float64(v))
		case pOk:
			fmt.Fprintf(fs, "%.*"+string(c), p, float64(v))
		case wOk:
			fmt.Fprintf(fs, "%*"+string(c), pos(w-utf8.RuneCount([]byte(unit))), float64(v))
		default:
			fmt.Fprintf(fs, "%"+string(c), float64(v))
		}
		fmt.Fprint(fs, unit)
	default:
		fmt.Fprintf(fs, "%%!%c(%T=%g m^3)", c, v, float64(v))
	}
}
